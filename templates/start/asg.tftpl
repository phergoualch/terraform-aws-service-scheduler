{
  "StartAt": "ListResourcesASG",
  "States": {
    "ListResourcesASG": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${list_resources_lambda_arn}",
        "Payload": {
          "service": "asg",
          "details.$": "$"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException",
            "ClientError"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "ResultSelector": {
        "data.$": "$.Payload"
      },
      "ResultPath": "$.lambdaResponse",
      "Next": "ResourceMapASG"
    },
    "ResourceMapASG": {
      "Type": "Map",
      "Iterator": {
        "StartAt": "WaitASG",
        "States": {
          "WaitASG": {
            "Type": "Wait",
            "TimestampPath": "$.nextEventTime",
            "Next": "GetDesiredCountASG"
          },
          "GetDesiredCountASG": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:getItem",
            "Parameters": {
              "TableName": "${dynamodb_table_name}",
              "Key": {
                "resourceArn": {
                  "S.$": "$.resourceArn"
                },
                "service": {
                  "S": "ec2"
                }
              },
              "ProjectionExpression": "autoscaling"
            },
            "ResultPath": "$.dynamoResult",
            "Catch": [
              {
                "ErrorEquals": [
                  "States.ALL"
                ],
                "Next": "ErrorCatcherASG"
              }
            ],
            "Next": "InDBASG",
            "Retry": [
              {
                "ErrorEquals": [
                  "States.ALL"
                ],
                "BackoffRate": 2,
                "IntervalSeconds": 5,
                "MaxAttempts": 3
              }
            ]
          },
          "InDBASG": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.dynamoResult.Item",
                "IsPresent": true,
                "Comment": "Yes",
                "Next": "FormatDynamoDBASG"
              }
            ],
            "Default": "ErrorCatcherASG"
          },
          "FormatDynamoDBASG": {
            "Type": "Pass",
            "Next": "UpdateAutoScalingGroup",
            "ResultPath": "$.resource.autoscaling",
            "Parameters": {
              "minSize.$": "$.dynamoResult.Item.autoscaling.M.minSize.S",
              "maxSize.$": "$.dynamoResult.Item.autoscaling.M.maxSize.S"
            }
          },
          "UpdateAutoScalingGroup": {
            "Type": "Task",
            "Parameters": {
              "AutoScalingGroupName.$": "$.details.groupName",
              "MinSize.$": "States.StringToJson($.resource.autoscaling.minSize)",
              "MaxSize.$": "States.StringToJson($.resource.autoscaling.maxSize)"
            },
            "Resource": "arn:aws:states:::aws-sdk:autoscaling:updateAutoScalingGroup",
            "Catch": [
              {
                "ErrorEquals": [
                  "States.ALL"
                ],
                "Next": "ErrorCatcherASG"
              }
            ],
            "ResultPath": null,
            "End": true
          },
          "ErrorCatcherASG": {
            "Type": "Pass",
            "End": true
          }
        }
      },
      "ItemsPath": "$.lambdaResponse.data",
      "End": true
    }
  }
}
